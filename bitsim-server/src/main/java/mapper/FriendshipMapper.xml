<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.FriendshipMapper" >
  <resultMap id="BaseResultMap" type="model.Friendship" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="friend_id" property="friendId" jdbcType="INTEGER" />
    <result column="user_pass" property="userPass" jdbcType="BIT" />
    <result column="friend_pass" property="friendPass" jdbcType="BIT" />
    <result column="apply_time" property="applyTime" jdbcType="TIMESTAMP" />
    <result column="apply_message" property="applyMessage" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, friend_id, user_pass, friend_pass, apply_time, apply_message, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.FriendshipExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from friendship
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from friendship
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.FriendshipExample" >
    delete from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.Friendship" >
    insert into friendship (id, user_id, friend_id, 
      user_pass, friend_pass, apply_time, 
      apply_message, create_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{friendId,jdbcType=INTEGER}, 
      #{userPass,jdbcType=BIT}, #{friendPass,jdbcType=BIT}, #{applyTime,jdbcType=TIMESTAMP}, 
      #{applyMessage,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="model.Friendship" >
    insert into friendship
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="friendId != null" >
        friend_id,
      </if>
      <if test="userPass != null" >
        user_pass,
      </if>
      <if test="friendPass != null" >
        friend_pass,
      </if>
      <if test="applyTime != null" >
        apply_time,
      </if>
      <if test="applyMessage != null" >
        apply_message,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userPass != null" >
        #{userPass,jdbcType=BIT},
      </if>
      <if test="friendPass != null" >
        #{friendPass,jdbcType=BIT},
      </if>
      <if test="applyTime != null" >
        #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="applyMessage != null" >
        #{applyMessage,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.FriendshipExample" resultType="java.lang.Integer" >
    select count(*) from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update friendship
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.friendId != null" >
        friend_id = #{record.friendId,jdbcType=INTEGER},
      </if>
      <if test="record.userPass != null" >
        user_pass = #{record.userPass,jdbcType=BIT},
      </if>
      <if test="record.friendPass != null" >
        friend_pass = #{record.friendPass,jdbcType=BIT},
      </if>
      <if test="record.applyTime != null" >
        apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.applyMessage != null" >
        apply_message = #{record.applyMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update friendship
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      friend_id = #{record.friendId,jdbcType=INTEGER},
      user_pass = #{record.userPass,jdbcType=BIT},
      friend_pass = #{record.friendPass,jdbcType=BIT},
      apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      apply_message = #{record.applyMessage,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.Friendship" >
    update friendship
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        friend_id = #{friendId,jdbcType=INTEGER},
      </if>
      <if test="userPass != null" >
        user_pass = #{userPass,jdbcType=BIT},
      </if>
      <if test="friendPass != null" >
        friend_pass = #{friendPass,jdbcType=BIT},
      </if>
      <if test="applyTime != null" >
        apply_time = #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="applyMessage != null" >
        apply_message = #{applyMessage,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Friendship" >
    update friendship
    set user_id = #{userId,jdbcType=INTEGER},
      friend_id = #{friendId,jdbcType=INTEGER},
      user_pass = #{userPass,jdbcType=BIT},
      friend_pass = #{friendPass,jdbcType=BIT},
      apply_time = #{applyTime,jdbcType=TIMESTAMP},
      apply_message = #{applyMessage,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>



    <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List" />
        from friendship
        where user_id = #{userId,jdbcType=INTEGER}
    </select>
</mapper>